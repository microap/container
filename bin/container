#! /usr/bin/env node

const fs = require('fs')
const path = require('path')
const shelljs = require('shelljs')
const merge = require('webpack-merge')
const currentProjectDir = process.cwd()
const currentConfigFilename = path.join(currentProjectDir, 'config/index.js')
const currentConfig = require(currentConfigFilename)(merge)
const currentProjectSourceDir = path.join(currentProjectDir, currentConfig.sourceRoot)

const containerProjectDir = path.resolve(__dirname, '..')
const containerConfigFilename = path.join(containerProjectDir, 'config/index.js')
const containerConfig = require(containerConfigFilename)(merge)
const containerProjectSourceDir = path.join(containerProjectDir, containerConfig.sourceRoot)

function updateContainerConfig() {
  try {
    const finalDist = path.join(path.relative(containerProjectDir, currentProjectDir), currentConfig.outputRoot)
    const containerConfigContnet = fs.readFileSync(containerConfigFilename, 'utf-8').toString()
    const str = containerConfigContnet.replace(/((?:'|")?outputRoot(?:'|")?[\s\n]*\:)[^,]+?(,|\})/m, `$1"${finalDist}"$2`)

    fs.writeFileSync(containerConfigFilename, str)
  } catch (e) {}
}

function readlinkSync(filename) {
  try {
    return fs.readlinkSync(filename)
  } catch (e) {}
}

function linkSync() {
  const files = fs.readdirSync(currentProjectSourceDir)
  files.forEach((filename) => {
    const shadowFile = path.join(containerProjectSourceDir, filename)
    try {
      const targetFile = readlinkSync(shadowFile)
      if (targetFile) {
        fs.unlinkSync(shadowFile)
      }
      const file = path.join(currentProjectSourceDir, filename)
      // console.log(file, shadowFile)
      fs.symlinkSync(file, shadowFile)
    } catch (e) { }
  })
}

function watch() {
  fs.watch(currentProjectSourceDir, (eventType, filename) => {
    const file = path.join(currentProjectSourceDir, filename)
    const shadowFile = path.join(containerProjectSourceDir, filename)
    if (eventType === 'rename') {
      if (!fs.existsSync(file)) {
        try {
          const targetFile = readlinkSync(shadowFile)
          if (targetFile) {
            fs.unlinkSync(shadowFile)
          }
        } catch (e) { }
      } else {
        fs.symlinkSync(file, shadowFile)
      }
    }
  })
}

const sourceArgs = process.argv.slice(2)

class CLI {
  run() {
    const isDev = sourceArgs.includes('--watch')
    const command = isDev ? 'watch' : sourceArgs[0]
    try {
      this[command]?.()
    } catch (e) {
      console.log(e)
    }
  }

  watch() {
    linkSync()
    watch()
    this.taro()
  }

  build() {
    linkSync()
    this.taro()
  }

  taro() {
    // 根据当前项目Config，更新容器Config，使生成dist是目录在当前项目的根目录下
    updateContainerConfig()
    const args = sourceArgs.join(' ')
    shelljs.exec(`cd ${containerProjectDir} && npx --node-options=--inspect-brk @tarojs/cli ${args}`)
  }
}

new CLI().run()


